#!/bin/bash
. ~/allthingshonk/honk-manage.conf
peepfile=$rundir/peep
usage(){
    cat >&2
    exit 1
} <<EOF
peeping-tom total-servers up_dist down_dist honk_dist

Creates $db, measuring on each "peep" command read from
$peepfile fifo. The tables and their meanings are:

Runs	     synchronization point for collected data on run_id.
Tries	     for each host, how many post are yet undelivered ?
Delivery_Rcpt	 for each host, how many post are yet undelivered for each recipient, in total ?
EOF

die(){
    printf '%s\n' "$*" >&2
    exit 1
}

create_tables(){
    runs_table="create table runs(
id integer primary key autoincrement,
time string,
servers integer,
up_dist integer,
down_dist integer,
honk_dist integer);"

    hosts_table="create table hosts(
id integer primary key,
url string,
port integer);"

    tries_table="create table tries(
run_id integer,
host_id integer,
tries integer,
count integer,
foreign key(run_id) references runs(id),
foreign key(host_id) references hosts(id));"

    rcpt_table="create table delivery_rcpt(
run_id integer,
host_id integer,
rcpt string,
count integer,
foreign key(run_id) references runs(id),
foreign key(host_id) references hosts(id));"
    printf '%s\n' \
	   "$runs_table" \
	   "$hosts_table" \
	   "$tries_table" \
	   "$rcpt_table"
}

get_run(){
    ctime=$(date "+%Y-%m-%d %H:%S")
    run=$(sqlite3 "$db" "insert into runs(time, servers, up_dist, down_dist, honk_dist) values ('$ctime', $servers, $up_dist, $down_dist, $honk_dist) returning id;")
}

insert_servers(){
    for (( i=0; i<servers; i++ )); do
	port=$((5000+i))
	printf "insert into hosts(id, url, port) values (%s, '%s', %s);\n" "$i" "$port.$machine.ashwink.com.np" "$port"
    done
}

attach_db(){
    for (( i=0; i<servers; i++ )); do
	port=$((5000+i))
	printf "attach database '%s' as %s;\n" "$datadir/$port/honk.db" "$machine$port"
    done
}

tries(){
    for (( i=0; i<servers; i++ )); do
	port=$((5000+i))
	doovers=$machine$port.doovers
	printf "insert into tries(run_id, host_id, tries, count)
select '%s', '%s', tries, count(*) from $doovers group by tries;\n" "$run" "$i"
    done
}

rcpt(){
    for (( i=0; i<servers; i++ )); do
	port=$((5000+i))
	doovers=$machine$port.doovers
	printf "insert into delivery_rcpt(run_id, host_id, rcpt, count)
select '%s', '%s', rcpt, count(*) from $doovers group by rcpt;\n" "$run" "$i"
    done
}
up_dist=up_dist
down_dist=down_dist
db="$rundir/stats_$(date '+%m-%d-%H:%M')_up_${up_dist}_down_${down_dist}_$machine.db"
if [[ $# != 4 ]]; then usage; fi
servers=$1 up_dist=$2 down_dist=$3 honk_dist=$4
db="$rundir/stats_$(date '+%m-%d-%H:%M')_up_${up_dist}_down_${down_dist}_$machine.db"
{
    if ! [[ -f "$db" ]]; then
	create_tables
    fi
    insert_servers
    attach_db
    while IFS= read -r cmd < "$peepfile"; do
	case $cmd in
	    "exit")
		exit 0
		;;
	esac
	get_run
	tries
	rcpt
    done
} | tee /tmp/log.log | sqlite3 "$db"
