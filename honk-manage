#!/bin/bash

#up, down, random, specific

usage(){
    printf '%s\n' "$*" >&2
    cat >&2
    exit 1
}<<\EOF
honk-manage _port_ up|down|random|(sleep _time_)
random sleeps for RANDOM % (60*60) time
EOF

init(){
    mkdir -p "$datadir" || exit 1
    cd "$datadir" || exit 1

    uname="$machine$port"
    pw="$uname"
    listen="127.0.0.1:$port"
    domain="$port.$machine.ashwink.com.np"

    printf "%s\n" "$uname" "$pw" "$listen" "$domain" |
	honk init || exit 1
    up
    cd "$datadir/" || exit 1
    honk-aggressively "$port" subscribe-all
    [[ $task = "up" ]] && exit
}

up(){
    honk --viewdir="$viewdir" &
}

down() {
    kill -SIGINT "$honkPid"
}

forceDown() {
    kill -SIGKILL "$honkPid"
}

timed_sleep(){
    time=$1
    down
    sleep "$time"
    up
}

random_sleep(){
   rand=$((1 + RANDOM % (60*60)))
   timed_sleep "$rand"
}

set -x

if (( $# < 2 )) && [[ $1 != "purge-all" ]]; then
    usage "not enough args"
fi

# shopt -s extglob
case $1 in
    [0-9][0-9][0-9][0-9])
	port=$1
	shift
    ;;
    purge-all)
	pkill --exact honk
	cd ~/honk/ || die "couldn't cd"
	rm -rf *
	exit
	;;
    *)
	usage "arg must be all digits"
	;;
esac

datadir="$HOME/honk/$port"
viewdir="$HOME/honk-0.9.8"
rundir="$HOME/allthingshonk"
. ~/allthingshonk/honk-manage.conf

task=$1
shift

if ! [[ -d "$datadir" ]]; then
	init
fi

cd "$datadir" || exit 1
honkPid="$(lsof -i "@0.0.0.0:$port" | awk 'NR==2 {print $2}')"

case $task in
    up)
        up
        ;;
    down)
        down
        ;;
    forceDown)
	forceDown
	;;
    sleep)
	[[ $1 ]] || usage "sleep _sleep time_"
	timed_sleep "$@"
	;;
    random)
	random_sleep
	;;
    purge)
	down
	cd
	rm "$datadir"
	;;
    *)
        echo "Invalid option.Try up, down or forceDown"
        ;;
esac
