#!/bin/bash

maxruns=1
totalservers=8
downdistribution=10
updistribution=50
honkdistribution=60
honktime=3
usage(){
    printf '%s\n' "$*" >&2
    cat >&2
    exit 1
}<<EOF
honk-manager [-t #servers] [-m maxruns] [-h honktime] [-H honkDist] [-U upDist] [-D downDist]
-t, #servers	no of servers to run at once (default $totalservers)
-m, maxruns	stop after m runs (default $maxruns)
-h, honktime	post message each h seconds (default $honktime)
-H, honkDist	% of servers which post messages (default $honkdistribution)
-U, upDist	% of dead servers which are revived each run (default $updistribution)
-D, downDist	% of servers which are killed each run (default $downdistribution)
EOF

get_servers(){
    #$1 folders upped and stored in servers array
    for (( i=0; i<"$totalservers"; i++)); do
	port=$((5000+i))
	honk-manage "$port" init || exit 1
	up_servers=("${up_servers[@]}" "$port")
    done
    wait
}

down_servers_func(){
    #$2 servers downed
    tmp=()
    for server in "${up_servers[@]}"; do
	if ((RANDOM%100 <= "$downdistribution" )); then
	   honk-manage "$server" down || exit 1
	   down_servers+=("$server")
	else
	    tmp+=("$server")
	fi
	up_servers=("${tmp[@]}")
    done
}

up_servers_func(){
    #$3 servers upped
    tmp=()
     for server in "${down_servers[@]}"; do
	if ((RANDOM%100 <= "$updistribution" )); then
	    honk-manage "$server" up || exit 1
	    up_servers+=("$server")
	else
	    tmp+=("$server")
	fi
	down_servers=("${tmp[@]}")
    done
}

subscribe_all(){
    for (( i=0; i<"$totalservers"; i++)); do
	port=$((5000+i))
	honk-manage "$port" subscribe-all "$totalservers" || die "couldn't subscribe by $port"
    done
}

cleanup(){
    set -x
    [[ $start ]] && echo exit > "$rundir/peep" 
    declare -p up_servers
    pkill --exact honk
    pkill --exact honk-servers
}

while getopts "t:m:h:H:U:D:" opt; do
    case $opt in
	t)
	    totalservers=$OPTARG
	    ;;
	m)
	    maxruns=$OPTARG
	    ;;
	h)
	    honktime=$OPTARG
	    ;;
	H)
	    honkdistribution=$OPTARG
	    ;;
	U)
	    updistribution=$OPTARG
	    ;;
	D)
	    downdistribution=$OPTARG
	    ;;
	"?")
	    usage
	    ;;
	*)
	    usage "impossible"
	    ;;
    esac
done

trap 'cleanup' EXIT
exec 3>~/allthingshonk/honk.log
# shellcheck source=honk-manage.conf
. ~/allthingshonk/honk-manage.conf

down_servers=()
up_servers=()
get_servers 1>&3 2>&1
sleep 15
subscribe_all
sleep 15
mkfifo "$rundir/peep"
peeping-tom "$totalservers" "$updistribution" "$downdistribution" "$honkdistribution" &

start=true
honk-servers "$totalservers" "$honkdistribution" "$honktime" &

for ((i=0; i<maxruns; i++)) ; do
    sleep "$((2 + RANDOM %5))"
    declare -p up_servers
    down_servers_func 1>&3 2>&1
    up_servers_func 1>&3 2>&1
    printf '%s %s\n' peep "${#up_servers[@]}" > "$rundir/peep"
done
