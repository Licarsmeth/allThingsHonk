#!/bin/bash
#honk-manager start 20(no. of servers) 5(% of down servers) 50(% of upped among the downed servers) 30(% of upped servers that want to honk aggressively)
usage(){
    printf '%s\n' "$*" >&2
    cat >&2
    exit 1
}<<\EOF
maxruns - max runs before exiting
upserver is a number between 1 and 1000
down,up and honk distributions between 1 and 100
honk means percent of upped servers that we want to honk with
EOF

die(){
    printf '%s\n' "$*" >&2
    exit 1
}

get_servers(){
    #$1 folders upped and stored in servers array
    for (( i=0; i<"$totalservers"; i++)); do
	port=$((5000+i))
	honk-manage "$port" up || exit 1
	up_servers=("${up_servers[@]}" "$port")
    done
    wait
}

down_servers_func(){
    #$2 servers downed
    tmp=()
    for server in "${up_servers[@]}"; do
	if ((RANDOM%100 <= "$downdistribution" )); then
	   honk-manage "$server" down || exit 1
	   down_servers+=("$server")
	else
	    tmp+=("$server")
	fi
	up_servers=("${tmp[@]}")
    done
}

up_servers_func(){
    #$3 servers upped
    tmp=()
     for server in "${down_servers[@]}"; do
	if ((RANDOM%100 <= "$updistribution" )); then
	    honk-manage "$server" up || exit 1
	    up_servers+=("$server")
	else
	    tmp+=("$server")
	fi
	down_servers=("${tmp[@]}")
    done
}

cleanup(){
    set -x
    echo exit > "$rundir/peep" 
    declare -p up_servers
    pkill --exact honk
    pkill --exact honk-servers
}

#start 20 gives the first 20 folders
#all folders stored in an array
#among those, $2 servers are downed, others are upped
#among downed servers, say 50% are upped
down_servers=()
up_servers=()

maxruns=1
totalservers=8
downdistribution=10
updistribution=50
honkdistribution=60
honktime=3

case $# in
    6)
	maxruns=$6
	;&
    5)
	honktime=$5
	;&
    4)
	(( $4 < 100 && $4 > 1 )) || usage
	honkdistribution=$4
    ;&
    3)
	(( $3 < 100 && $3 > 1 )) || usage
	updistribution=$3
    ;&
    2)
	(( $2 < 100 && $2 > 1 )) || usage
	downdistribution=$2
    ;&
    1)
	(( $1 < 1000 && $1 > 1)) || usage "no of servers"
	totalservers=$1
	;;
    0)
	;;
    *)
	usage
	;;
esac

trap 'cleanup' EXIT
exec 3>>~/allthingshonk/honk.log
# shellcheck source=honk-manage.conf
. ~/allthingshonk/honk-manage.conf
get_servers 1>&3 2>&1

mkfifo "$rundir/peep"
peeping-tom "$totalservers" "$updistribution" "$downdistribution" "$honkdistribution" &
honk-servers "$totalservers" "$honkdistribution" "$honktime" &

for ((i=0; i<maxruns; i++)) ; do
    sleep "$((2 + RANDOM %5))"
    declare -p up_servers
    down_servers_func 1>&3 2>&1
    up_servers_func 1>&3 2>&1
    printf '%s %s\n' peep "${#up_servers[@]}" > "$rundir/peep"
done
